{"auto_alias_prefix":"--","auto_alias_style":"lowercase-hyphen","builtins":{"cmd":null,"help":null,"path_etc":null,"usage":null,"version":null},"cache":true,"cache_file":"nargs-cache.json","dump":{"args":{"a":["--args"],"ai":{"--args":{"is_flag":false,"prefix":"--","text":"args"}},"ar":{"_cmd_":{"a":["--cmd"],"ai":{"--cmd":{"is_flag":false,"prefix":"--","text":"cmd"}},"ap":false,"ar":{},"as":false,"da":"--cmd","h":"Load program's arguments from a file.","ib":true,"in":"Arguments can be typed with indentation and new lines in the text file. Lines are then striped and new lines are joined with spaces and the whole text is split with shlex and fed again to the program. Root argument alias needs to be provided as first argument. Empty lines and lines starting with '#' are ignored.","is":false,"t":"file","v":true,"vi":1,"vm":1,"vr":true},"_help_":{"a":["--help","-h"],"ai":{"--help":{"is_flag":false,"prefix":"--","text":"help"},"-h":{"is_flag":true,"prefix":"-","text":"h"}},"ap":false,"ar":{"examples":{"a":["--examples","-e"],"ai":{"--examples":{"is_flag":false,"prefix":"--","text":"examples"},"-e":{"is_flag":true,"prefix":"-","text":"e"}},"ar":{},"as":false,"da":"--examples","h":"Print program examples and exit.","ib":true,"is":false},"export":{"a":["--export"],"ai":{"--export":{"is_flag":false,"prefix":"--","text":"export"}},"ar":{"overwrite":{"a":["--overwrite"],"ai":{"--overwrite":{"is_flag":false,"prefix":"--","text":"overwrite"}},"ar":{},"da":"--overwrite","h":"Implicitly overwrites exported documentation file if it exists already.","ib":true},"to":{"a":["--to"],"ai":{"--to":{"is_flag":false,"prefix":"--","text":"to"}},"ar":{},"da":"--to","h":"Export help to selected path.","ib":true,"t":"vpath","v":true,"vi":1,"vm":1,"vr":true}},"da":"--export","h":"Export help to selected format.","i":["asciidoc","html","markdown","text"],"ib":true,"t":"str","v":true,"vi":1,"vm":1,"vr":true},"metadata":{"a":["--metadata","-m"],"ai":{"--metadata":{"is_flag":false,"prefix":"--","text":"metadata"},"-m":{"is_flag":true,"prefix":"-","text":"m"}},"ar":{"json":{"a":["--json","-j"],"ai":{"--json":{"is_flag":false,"prefix":"--","text":"json"},"-j":{"is_flag":true,"prefix":"-","text":"j"}},"ar":{},"da":"--json","h":"Selected metadata is returned as json dictionary","ib":true,"is":false},"keys":{"a":["--keys","-k"],"ai":{"--keys":{"is_flag":false,"prefix":"--","text":"keys"},"-k":{"is_flag":true,"prefix":"-","text":"k"}},"ar":{},"da":"--keys","h":"Return only keys from metadata dictionary","ib":true,"is":false,"xg":[1]},"values":{"a":["--values","-v"],"ai":{"--values":{"is_flag":false,"prefix":"--","text":"values"},"-v":{"is_flag":true,"prefix":"-","text":"v"}},"ar":{},"da":"--values","h":"Return only values from metadata dictionary","ib":true,"is":false,"xg":[1]}},"as":false,"da":"--metadata","h":"Print program metadata and exit.","ib":true,"in":"KEY can be provided to get only selected key(s) from metadata dictionary. If KEY is not provided then all keys from metadata dictionary are selected.","is":false,"l":"KEY","t":"str","v":true,"vi":1,"x":{"keys":{"1":["values"]},"values":{"1":["keys"]}}},"syntax":{"a":["--syntax"],"ai":{"--syntax":{"is_flag":false,"prefix":"--","text":"syntax"}},"ar":{"only":{"a":["--only"],"ai":{"--only":{"is_flag":false,"prefix":"--","text":"only"}},"ar":{},"da":"--only","h":"Print only arguments Cheat Sheet syntax and exit.","ib":true,"is":false}},"da":"--syntax","h":"Print arguments Cheat Sheet syntax and exit.","ib":true,"is":false}},"as":false,"da":"--help","h":"Print program help and exit.","ib":true,"is":false},"_path_etc_":{"a":["--path-etc"],"ai":{"--path-etc":{"is_flag":false,"prefix":"--","text":"path-etc"}},"ap":false,"ar":{},"as":false,"da":"--path-etc","h":"Print program configuration path and exit.","ib":true,"is":false},"_usage_":{"a":["--usage","-u","?"],"ai":{"--usage":{"is_flag":false,"prefix":"--","text":"usage"},"-u":{"is_flag":true,"prefix":"-","text":"u"},"?":{"is_flag":true,"prefix":"","text":"?"}},"ar":{"depth":{"a":["--depth","-d"],"ai":{"--depth":{"is_flag":false,"prefix":"--","text":"depth"},"-d":{"is_flag":true,"prefix":"-","text":"d"}},"ar":{},"d":[1],"da":"--depth","h":"Provide the printing depth of nested arguments.","ib":true,"in":"If LEVEL == -1 then all nested arguments are printed. If LEVEL == 0 then only selected argument is printed. If LEVEL > 0 then the bigger the LEVEL number is, the bigger the children nesting level is if any children are available.","is":false,"l":"LEVEL","re":true,"t":"int","v":true,"vi":1,"vm":1,"vr":true},"examples":{"a":["--examples","-e"],"ai":{"--examples":{"is_flag":false,"prefix":"--","text":"examples"},"-e":{"is_flag":true,"prefix":"-","text":"e"}},"ar":{},"da":"--examples","h":"Print argument(s) examples if any","ib":true,"is":false},"flags":{"a":["--flags","-F"],"ai":{"--flags":{"is_flag":false,"prefix":"--","text":"flags"},"-F":{"is_flag":true,"prefix":"-","text":"F"}},"ar":{},"da":"--flags","h":"Print flag set if any for all arguments available on the terminal.","ib":true,"is":false},"from_":{"a":["--from","-f"],"ai":{"--from":{"is_flag":false,"prefix":"--","text":"from"},"-f":{"is_flag":true,"prefix":"-","text":"f"}},"ar":{},"d":[0],"da":"--from","h":"This option allows to start printing usage from a parent.","ib":true,"in":"If LEVEL == -1 then selected argument is the root argument. If LEVEL == 0 then selected argument is the current argument. If LEVEL > 0 then one argument parent is selected and the bigger the LEVEL number is, the older the selected parent is unless parent's limit is reached. Argument's parent's limit is the oldest parent also called the root argument.","is":false,"l":"LEVEL","re":true,"t":"int","v":true,"vi":1,"vm":1,"vr":true},"hint":{"a":["--hint","-h"],"ai":{"--hint":{"is_flag":false,"prefix":"--","text":"hint"},"-h":{"is_flag":true,"prefix":"-","text":"h"}},"ar":{},"da":"--hint","h":"Print argument(s) hint if any.","ib":true,"is":false},"info":{"a":["--info","-i"],"ai":{"--info":{"is_flag":false,"prefix":"--","text":"info"},"-i":{"is_flag":true,"prefix":"-","text":"i"}},"ar":{},"da":"--info","h":"Print argument(s) info if any.","ib":true,"is":false},"path":{"a":["--path","-p"],"ai":{"--path":{"is_flag":false,"prefix":"--","text":"path"},"-p":{"is_flag":true,"prefix":"-","text":"p"}},"ar":{},"da":"--path","h":"Print argument(s) path with values.","ib":true,"is":false},"properties":{"a":["--properties","-r"],"ai":{"--properties":{"is_flag":false,"prefix":"--","text":"properties"},"-r":{"is_flag":true,"prefix":"-","text":"r"}},"ar":{},"da":"--properties","h":"Print argument(s) properties.","i":["allow_parent_fork","allow_siblings","fork","need_child","repeat","required","xor_groups"],"ib":true,"is":false,"t":"str","v":true,"vi":1,"vm":7}},"da":"--usage","h":"Print program usage and exit.","ib":true,"in":"LEVEL is an integer >= 0. LEVEL number describes the number of nested node levels to print. LEVEL number is relative to current argument node level. If LEVEL == 0 then all nested node levels are printed. If LEVEL == 1 then only current argument is printed. If LEVEL > 1 current argument's node levels are printed and LEVEL sets the depth of node levels nesting.","is":false,"iu":true,"rc":["depth","from_"]},"_version_":{"a":["--version","-v"],"ai":{"--version":{"is_flag":false,"prefix":"--","text":"version"},"-v":{"is_flag":true,"prefix":"-","text":"v"}},"ap":false,"ar":{},"as":false,"da":"--version","h":"Print program version and exit.","ib":true,"is":false},"close":{"a":["--close"],"ai":{"--close":{"is_flag":false,"prefix":"--","text":"close"}},"ar":{"all":{"a":["--all"],"ai":{"--all":{"is_flag":false,"prefix":"--","text":"all"}},"ar":{},"da":"--all"}},"da":"--close","l":"GROUP_NAME","t":"str","v":true,"vi":1},"execute":{"a":["--execute"],"ai":{"--execute":{"is_flag":false,"prefix":"--","text":"execute"}},"ar":{"group":{"a":["--group"],"ai":{"--group":{"is_flag":false,"prefix":"--","text":"group"}},"ar":{},"da":"--group","t":"str","v":true,"vi":1,"vm":1},"window":{"a":["--window"],"ai":{"--window":{"is_flag":false,"prefix":"--","text":"window"}},"ar":{},"da":"--window","t":"int","v":true,"vi":1,"vm":1}},"da":"--execute","t":"str","v":true,"vi":1,"vr":true},"focus":{"a":["--focus"],"ai":{"--focus":{"is_flag":false,"prefix":"--","text":"focus"}},"ar":{"group":{"a":["--group"],"ai":{"--group":{"is_flag":false,"prefix":"--","text":"group"}},"ar":{"add":{"a":["--add"],"ai":{"--add":{"is_flag":false,"prefix":"--","text":"add"}},"ar":{},"as":false,"da":"--add"},"delete":{"a":["--delete"],"ai":{"--delete":{"is_flag":false,"prefix":"--","text":"delete"}},"ar":{},"as":false,"da":"--delete"},"last":{"a":["--last"],"ai":{"--last":{"is_flag":false,"prefix":"--","text":"last"}},"ar":{},"as":false,"da":"--last"},"next":{"a":["--next"],"ai":{"--next":{"is_flag":false,"prefix":"--","text":"next"}},"ar":{},"as":false,"da":"--next"},"previous":{"a":["--previous"],"ai":{"--previous":{"is_flag":false,"prefix":"--","text":"previous"}},"ar":{},"as":false,"da":"--previous"},"toggle":{"a":["--toggle"],"ai":{"--toggle":{"is_flag":false,"prefix":"--","text":"toggle"}},"ar":{},"as":false,"da":"--toggle"}},"as":false,"da":"--group","n":true},"window":{"a":["--window"],"ai":{"--window":{"is_flag":false,"prefix":"--","text":"window"}},"ar":{"active_group":{"a":["--active-group"],"ai":{"--active-group":{"is_flag":false,"prefix":"--","text":"active-group"}},"ar":{"last":{"a":["--last"],"ai":{"--last":{"is_flag":false,"prefix":"--","text":"last"}},"ar":{},"as":false,"da":"--last"},"next":{"a":["--next"],"ai":{"--next":{"is_flag":false,"prefix":"--","text":"next"}},"ar":{},"as":false,"da":"--next"},"previous":{"a":["--previous"],"ai":{"--previous":{"is_flag":false,"prefix":"--","text":"previous"}},"ar":{},"as":false,"da":"--previous"}},"as":false,"da":"--active-group","n":true},"last_global":{"a":["--last-global"],"ai":{"--last-global":{"is_flag":false,"prefix":"--","text":"last-global"}},"ar":{},"as":false,"da":"--last-global"}},"as":false,"da":"--window","n":true}},"da":"--focus","n":true},"launch":{"a":["--launch","-l"],"ai":{"--launch":{"is_flag":false,"prefix":"--","text":"launch"},"-l":{"is_flag":true,"prefix":"-","text":"l"}},"ar":{"from_":{"a":["--from","-f"],"ai":{"--from":{"is_flag":false,"prefix":"--","text":"from"},"-f":{"is_flag":true,"prefix":"-","text":"f"}},"ar":{"group":{"a":["--group"],"ai":{"--group":{"is_flag":false,"prefix":"--","text":"group"}},"ar":{},"da":"--group","l":"GROUP_NAME","t":"str","v":true,"vi":1,"vm":1,"vr":true},"vars":{"a":["--vars"],"ai":{"--vars":{"is_flag":false,"prefix":"--","text":"vars"}},"ar":{},"da":"--vars","l":"VARS_SET","t":"str","v":true,"vi":1,"vm":1,"vr":true}},"da":"--from","is":false,"l":"APP_PATH","t":"file","v":true,"vi":1,"vm":1,"xg":[1]},"prompt_group":{"a":["--prompt-group"],"ai":{"--prompt-group":{"is_flag":false,"prefix":"--","text":"prompt-group"}},"ar":{},"da":"--prompt-group"},"prompt_windows":{"a":["--prompt-windows"],"ai":{"--prompt-windows":{"is_flag":false,"prefix":"--","text":"prompt-windows"}},"ar":{},"da":"--prompt-windows","xg":[1]},"search":{"a":["--search","-s"],"ai":{"--search":{"is_flag":false,"prefix":"--","text":"search"},"-s":{"is_flag":true,"prefix":"-","text":"s"}},"ar":{"index":{"a":["--index","-i"],"ai":{"--index":{"is_flag":false,"prefix":"--","text":"index"},"-i":{"is_flag":true,"prefix":"-","text":"i"}},"ar":{},"da":"--index","is":false,"t":"int","v":true,"vi":1,"vm":1,"vr":true},"root_dir":{"a":["--root-dir"],"ai":{"--root-dir":{"is_flag":false,"prefix":"--","text":"root-dir"}},"ar":{},"da":"--root-dir","l":"ROOT_DIRECTORY","t":"dir","v":true,"vi":1,"vm":1,"vr":true},"vars":{"a":["--vars","-v"],"ai":{"--vars":{"is_flag":false,"prefix":"--","text":"vars"},"-v":{"is_flag":true,"prefix":"-","text":"v"}},"ar":{},"da":"--vars","is":false,"l":"VARS_SET","t":"str","v":true,"vi":1,"vm":1,"vr":true}},"da":"--search","is":false,"l":"APP_NAME","t":"str","v":true,"vi":1,"vm":1,"vr":true,"xg":[1]},"syntax":{"a":["--syntax"],"ai":{"--syntax":{"is_flag":false,"prefix":"--","text":"syntax"}},"ar":{},"da":"--syntax","in":"verify launcher file syntax"}},"da":"--launch","is":false,"l":"LAUNCHER_NAME","n":true,"t":"str","v":true,"vi":1,"vm":1,"x":{"from_":{"1":["prompt_windows","search"]},"prompt_windows":{"1":["from_","search"]},"search":{"1":["from_","prompt_windows"]}}},"switch_group":{"a":["--switch-group"],"ai":{"--switch-group":{"is_flag":false,"prefix":"--","text":"switch-group"}},"ar":{"next":{"a":["--next"],"ai":{"--next":{"is_flag":false,"prefix":"--","text":"next"}},"ar":{},"da":"--next"},"previous":{"a":["--previous"],"ai":{"--previous":{"is_flag":false,"prefix":"--","text":"previous"}},"ar":{},"da":"--previous"}},"da":"--switch-group","l":"GROUP_NAME","t":"str","v":true,"vi":1,"vm":1}},"da":"--args","n":true,"re":true}},"map":{"arg_defaults":{"ap":true,"ar":{},"as":true,"d":null,"e":true,"ex":null,"f":false,"h":null,"i":null,"ib":false,"ic":false,"il":[],"in":null,"is":true,"iu":false,"l":null,"n":false,"r":"replace","rc":[],"re":false,"s":true,"t":null,"v":false,"vi":null,"vm":null,"vr":false,"x":{},"xg":null},"arg_props":{"a":"aliases","ai":"aliases_info","ap":"allow_parent_fork","ar":"args","as":"allow_siblings","d":"default","da":"default_alias","e":"enabled","ex":"examples","f":"fork","h":"hint","i":"in","ib":"is_builtin","ic":"is_custom_builtin","il":"in_labels","in":"info","is":"is_auto_alias","iu":"is_usage","l":"label","n":"need_child","r":"repeat","rc":"required_children","re":"required","s":"show","t":"type","v":"values_authorized","vi":"values_min","vm":"values_max","vr":"values_required","x":"xor","xg":"xor_groups"},"theme_defaults":{"b":null,"f":null,"i":false,"o":false,"u":false},"theme_props":{"b":"background","f":"foreground","i":"italic","o":"bold","u":"underline"}},"md5_files":{"filenpa_metadata":{"filenpa":"/home/gabaaa/fty/wrk/s/scriptjob/1/src/gpm.json","md5":"48e1bc690ec4a4d6956ea00305f9826f"},"nargs":{"filenpa":"/home/gabaaa/fty/wrk/s/scriptjob/1/src/gpkgs/nargs/gpm.json","md5":"b3d56d931f07de785d4b3c52d6724c1c"},"options_file":{"filenpa":"/home/gabaaa/fty/wrk/s/scriptjob/1/src/config/options.yaml","md5":"68841285190dacde0cc2456f14a8710c"}},"md5_options":"2dfabbcd46aa02322e23c358f321b4a4","metadata":{"authors":["Gabriel Auger"],"deps":["a1c744b9-f712-43fa-bf83-60ad15122cea|bwins|2.1.0|gpm","fe9fbe81-806f-4e85-8042-aaa33ce02d6a|etconf|2.2.5|gpm","f128844d-236e-4c1e-8537-92b2d57ffc76|guitools|4.5.6|gpm","cf09346e-b436-4259-b6dd-e56516b508a5|message|8.1.2|gpm","89d8676a-6b02-43fa-8694-e97de5680cd0|nargs|3.0.2|gpm","28deaa04-a109-4dd3-9a04-ee896c96af6d|notification|3.2.1|gpm"],"description":"Scriptjob is a coding production tool. It is close to a windows manager at the difference that it works at a higher level. It gathers windows into groups that are defined by the user. Each window in a group can be set with one or multiple actions. Actions are defined in another application called 'scriptjob_actions'. scriptjob allows to work on multiple coding projects at the same time without being overwhelmed by the number of opened windows. Each setup can be saved in order to be restored later. The commands of this software are intended to be triggered with hotkeys (I am using xbindkeys).","executable":"scriptjob","filen_main":"main.py","gpm_version":"0.2.0","installer":"gpm","licenses":["MIT"],"name":"scriptjob","timestamp":1666716890.229263,"uuid4":"43f5e40b-e7e7-4ee6-b3d9-0c6b1e29e795","version":"11.1.0"},"nargs_version":"3.0.2","only_cache":false,"options_file":"config/options.yaml","path_etc":"/home/gabaaa/fty/etc/s/scriptjob/43f5e40be7e74ee6b3d90c6b1e29e795/11","pretty_help":true,"pretty_msg":true,"raise_exc":true,"substitute":false,"theme":{"about_fields":{"f":"202;233;130"},"aliases":{"f":"136;184;246"},"arg_index":{"o":true},"arg_path":{"f":"202;233;130"},"brackets":{"f":"202;233;130","o":true},"bullets":{"f":"156;153;142"},"emphasize":{"f":"229;120;109"},"examples":{},"flags":{"f":"149;228;84","i":true},"headers":{"f":"234;231;136","o":true},"hint":{"i":true},"info":{},"properties":{},"syntax_headers":{"f":"202;233;130"},"values":{"f":"215;135;255","i":true}}}